import java.util.regex.Matcher

apply plugin: 'com.android.library'

def versionNameFunc() {
    String config = 'library/src/main/java/com/qiniu/android/common/Constants.java'
    String fileContents = new File(config).text
    Matcher myMatcher = fileContents =~ /VERSION = "(.+)";/
    String version = myMatcher[0][1]
    println(version)
    return version
}

def versionNameToCode(String version) {
    String v = version.replaceAll(/\./, '')
    return v.toLong()
}

String versionNameVar = versionNameFunc()
int code = versionNameToCode(versionNameVar)

android {
    compileSdkVersion 30
    buildToolsVersion '29.0.3'
    defaultConfig {
        //applicationId "com.qiniu.android"
        minSdkVersion 14
        targetSdkVersion 30
        versionCode code
        versionName versionNameVar
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }

    }

    lintOptions {
        warning 'InvalidPackage'
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}


dependencies {
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'

//    implementation 'com.squareup.okhttp3:okhttp:3.12.+'
    implementation 'com.qiniu:happy-dns:1.0.0'
    // for javax.annotation.Nullable use in custom MultipartBody and Headers implements.
//    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.conscrypt:conscrypt-android:2.2.1'
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    androidTestImplementation 'junit:junit:4.12'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

task releaseJar(type: Jar, dependsOn: 'build') {
    //指定生成的jar名
    baseName 'qiniu-android-sdk-' + versionNameVar
    //从哪里打包class文件
//    from('build/intermediates/classes/release/com/qiniu/android/dns/')
    //打包到jar后的目录结构
//    into('com/qiniu/android/dns/')
    //去掉不需要打包的目录和文件
    exclude('test/', 'BuildConfig.class', 'R.class')
    //去掉R$开头的文件
    exclude { it.name.startsWith('R$') }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompileProvider
    task.from variant.javaCompileProvider.get().destinationDir
    task.exclude '**/R.*', '**/R$*.*', '**/BuildConfig.class'
    artifacts.add('archives', task)
}

apply plugin: 'maven-publish'

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

//以下与dependencies{}同级
publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.qiniu'
            artifactId = 'qiniu-android-sdk'
            version = versionNameVar

            afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
            artifact generateSourcesJar

            pom.withXml{
                def dependenciesNode = asNode().appendNode("dependencies")
                configurations.implementation.allDependencies.forEach(){
                    Dependency dependency ->
                        if (dependency.version != "unspecified" && dependency.name != "unspecified"){
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dependency.group)
                            dependencyNode.appendNode('artifactId', dependency.name)
                            dependencyNode.appendNode('version', dependency.version)
                        }
                }
            }
        }
    }
//本地地址
    repositories { maven { url = "file:/Users/senyang/.m2/repository/" } }
}

setProperty('VERSION_NAME', versionNameVar)
setProperty('VERSION_CODE', code)

apply from: '../mvn_push.gradle'
